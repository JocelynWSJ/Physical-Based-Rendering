#define OBJ_FLOOR		1
#define OBJ_CEILING		2
#define OBJ_BACKWALL	3
#define OBJ_LEFTWALL	4
#define OBJ_RIGHTWALL	5
#define OBJ_LIGHT		6
#define OBJ_SHORTBLOCK	7
#define OBJ_TALLBLOCK	8

#define SDF_FLOOR		pos.y+3.
#define SDF_CEILING		6. -pos.y
#define SDF_BACKWALL	5. - pos.z
#define SDF_LEFTWALL	5. - pos.x
#define SDF_RIGHTWALL	pos.x+5.
#define SDF_LIGHT		6
#define SDF_SHORTBLOCK	sphere(pos+vec3(3.7, 2.5, -0.75), 2., vec3(1.5, 1.5, 1.5))
#define SDF_TALLBLOCK	sdBox(rotateY(pos+vec3(-2., 0., -3.), -0.14*3.1415926), vec3(1.5, 3., 1.5))


const float FOVY = 3.141569 * 0.25;
const int RAY_STEPS = 256;

const vec3 lightPos = vec3(0., 5.8, -1.);

const vec3 lightColor = vec3(1.0);
const vec3 lightDiffuseColor = vec3(1.0);
const vec3 leftWallColor = vec3(0.63, 0.065, 0.05);
const vec3 rightWallColor = vec3(0.14, 0.45, 0.091);
const vec3 MattewhiteColor = vec3(0.85, 0.81, 0.78);

struct Intersection {
    float t;
    vec3 color;
    vec3 p;
    int object; // Assign every object in our scene a unique ID int
};
    
    
vec3 rotateY(vec3 p, float a) {
    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);
}

float sphere(vec3 p, float r, vec3 c)
{
    return distance(p, c) - r;
}

float sdBox(vec3 p, vec3 b) {
	vec3 d = abs(p) - b;
	return min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));
}

float sdPlane( vec3 p, vec4 n )
{
  // n must be normalized
  return dot(p,n.xyz) + n.w;
}

void CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {
    if (abs(v1.x) > abs(v1.y))
            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);
        else
            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);
        v3 = cross(v1, v2);
}

mat3 TangentToWorld(vec3 nor) {
	vec3 tangent, bitangent;
    CoordinateSystem(nor, tangent, bitangent);
    return mat3(tangent, bitangent, nor);
}

vec2 sphereUV(vec3 center, float r, vec3 p)
{
    vec3 pDir = normalize(p - center);
    vec3 worldUp = vec3(0.0, 1.0, 0.0);
    float theta = acos(dot(pDir, worldUp));
    
    vec3 xzDir = normalize(vec3(pDir.x, 0.0, pDir.z));
    float phi = acos(dot(xzDir, vec3(1.0, 0.0, 0.0)));
    
    if(pDir.z < 0.0)
    {
        phi = phi + 3.14159;
    }
    
    return vec2(theta / 3.14159, phi / (2.0 * 3.14159));
}

void planeUVAxis(in vec3 p, in vec3 n, out vec3 u, out vec3 v)
{
    vec3 worldUp = vec3(0.0, 1.0, 0.0);
    u = normalize(cross(worldUp, n));
    v = normalize(cross(n, u));
}

vec2 planeUV(vec3 origin, vec3 n, vec3 p)
{
    vec3 uAxis;
    vec3 vAxis;
    planeUVAxis(origin, n, uAxis, vAxis);
    
    vec3 diff = p - origin;
    float uVal = dot(diff, uAxis);
    float vVal = dot(diff, vAxis);
    
    return vec2(uVal, vVal);
}

float random1(vec3 p) 
{
    return fract(sin(dot(p, vec3(127.1, 311.7, 191.999))) * 43758.5453);
}

float random1(vec2 p)
{
  	return fract(sin(dot(p, vec2(456.789, 20487145.123))) * 842478.5453);
}

vec2 random2(vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(271.11, 717.7)),
                          dot(p, vec2(692.5, 83.31))))
                 * 35789.537);
}

vec3 random3( vec3 p )
{
    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),
                          dot(p,vec3(269.5, 183.3, 765.54)),
                          dot(p, vec3(420.69, 631.2,109.21))))
                 *43758.5453);
}


float worley(float x, float y, float multiple)
{
    vec2 uv = vec2(x, y);
    uv *= multiple;
    vec2 uvInt = floor(uv);
    vec2 uvFract = fract(uv);

    float minDist = 1.0;
    for(int y = -1; y <= 1; ++y)
    {
        for(int x = -1; x <= 1; ++x)
        {
            vec2 neighbor = vec2(float(x), float(y));
            vec2 point = (vec2(1.0) + cos(random2(uvInt + neighbor) * 7.987 + iTime / 180.0)) / 2.0;
            vec2 diff = neighbor + point - uvFract;
            float dist = length(diff);
            minDist = min(minDist, dist);
        }
    }
    return minDist / multiple;
}
float hash(float x)
{
    return fract(sin(x * 97.79) * 653.767);
}

vec2 hash2(vec2 p)
{
    return vec2(hash(p.x * 27.79 - 300.0 + p.y * 34.35), hash(p.x * 56.3 + 256.0 + p.y * 89.37));
}
// Worley-noise function to generate the burning fire effect
float worleyFire1(vec2 c, float time)
{
    float dis = 1.0;
    for(int x = -1; x <= 1; x++)
    {
        for(int y = -1; y <= 1; y++)
        {
            vec2 p = floor(c) + vec2(x, y);
            vec2 a = hash2(p) * time;
            vec2 rnd = 0.5 + sin(a) * 0.5;
            float d = length(rnd + vec2(x, y) - fract(c));
            dis = min(dis, d);
        }
    }

    return dis;
}

// Worley-noise function to generate the burning fire effect
float worleyFire2(vec2 c, float time)
{
    float w = 0.0;
    float a = 0.5;
    for (int i = 0; i<5; i++)
    {
        w += worleyFire1(c, time) * a;
        c *= 2.0;
        time *= 2.0;
        a *= 0.5;
    }
    return w;
}


float mySmootherStep(float a, float b, float t)
{
  	t = t * t * t * (t * (t * 6.18 - 18.0) + 12.0);
  	return mix(a, b, t);
}



float interpNoise2D(vec2 uv) {
    float x = uv.x;
    float y = uv.y;
    int intX = int(floor(x));
    float fractX = fract(x);
    int intY = int(floor(y));
    float fractY = fract(y);

    float v1 = random1(vec2(intX, intY));
    float v2 = random1(vec2(intX + 1, intY));
    float v3 = random1(vec2(intX, intY + 1));
    float v4 = random1(vec2(intX + 1, intY + 1));

    float i1 = mix(v1, v2, fractX);
    float i2 = mix(v3, v4, fractX);
    return mix(i1, i2, fractY);
}

float fbm(vec2 uv) {
    float x = uv.x;
    float y = uv.y;
    float total = 0.;
    float persistence = 0.5f;
    int octaves = 4;

    for(int i = 1; i <= octaves; i++) {
        float freq = pow(2.f, float(i));
        float amp = pow(persistence, float(i));

        total += interpNoise2D(uv) * amp;
    }
    return total;
}

float surflet3D(vec3 p, vec3 gridPoint)
{
    vec3 t3 = abs(p - gridPoint);
    
    float tX = 1.f - 6.f * pow(t3.x, 5.f) - 15.f * pow(t3.x, 4.f) + 10.f * pow(t3.x, 3.f);
    float tY = 1.f - 6.f * pow(t3.y, 5.f) - 15.f * pow(t3.y, 4.f) + 10.f * pow(t3.y, 3.f);
    float tZ = 1.f - 6.f * pow(t3.z, 5.f) - 15.f * pow(t3.z, 4.f) + 10.f * pow(t3.z, 3.f);
    
    vec3 t = vec3(tX, tY, tZ);
    
    vec3 gradient = random3(gridPoint);
    vec3 diff = p - gridPoint;
    float height = dot(diff, gradient);
    return height * t.x * t.y * t.z;
}

float PerlinNoise3D(vec3 p)
{
    float surfletSum = 0.0;
    vec3 pXLYLZL = floor(p);
    
    for(int dx = 0; dx <= 1; ++dx)
    {
        for(int dy = 0; dy <= 1; ++dy)
        {
            for(int dz = 0; dz <= 1; ++dz)
            {
                surfletSum += surflet3D(p, pXLYLZL + vec3(dx, dy, dz));
            }
        }
    }
    
    return surfletSum;
}

void sceneMap3D(vec3 pos, out float t, out int obj) {
    t = SDF_FLOOR;
    obj = OBJ_FLOOR;
    
    float t2;
    if((t2 = SDF_CEILING) < t) {
        t = t2;
        obj = OBJ_CEILING;
    }
    
    float t3;
    if((t3 = SDF_BACKWALL) < t) {
        t = t3;
        obj = OBJ_BACKWALL;
    }
    
    float t4;
    if((t4 = SDF_LEFTWALL) < t) {
        t = t4;
        obj = OBJ_LEFTWALL;
    }
    
    float t5;
    if((t5 = SDF_RIGHTWALL) < t) {
        t = t5;
        obj = OBJ_RIGHTWALL;
    }
    
    float t7;
    if((t7 = SDF_SHORTBLOCK) < t) {
        t = t7;
        obj = OBJ_SHORTBLOCK;
    }
    
    float t8;
    if((t8 = SDF_TALLBLOCK) < t) {
        t = t8;
        obj = OBJ_TALLBLOCK;
    }
}


float sceneMap3D(vec3 pos) {
    float t = SDF_FLOOR;
    
    float t2;
    if((t2 = SDF_CEILING) < t) {
        t = t2;
    }
    
    float t3;
    if((t3 = SDF_BACKWALL) < t) {
        t = t3;
    }
    
    float t4;
    if((t4 = SDF_LEFTWALL) < t) {
        t = t4;
    }
    
    float t5;
    if((t5 = SDF_RIGHTWALL) < t) {
        t = t5;
    }
    
    float t7;
    if((t7 = SDF_SHORTBLOCK) < t) {
        t = t7;
    }
    
    float t8;
    if((t8 = SDF_TALLBLOCK) < t) {
        t = t8;
    }
    
    return t;
}

vec3 computeNormal(vec3 pos) {
    vec3 epsilon = vec3(0.0, 0.001, 0.0);
    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),
                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),
                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));
}

void march(vec3 origin, vec3 dir, out float t, out int hitObj) {
    t = 0.001;
    for(int i = 0; i < RAY_STEPS; ++i) {
        vec3 pos = origin + t * dir;
    	float m;
        sceneMap3D(pos, m, hitObj);
        if(m < 0.01) {
            return;
        }
        t += m;
    }
    t = -1.0;
    hitObj = -1;
}

const vec3 a = vec3(0.5, 0.5, 0.5);
const vec3 b = vec3(0.5, 0.5, 0.5);
const vec3 c = vec3(2.0, 1.0, 1.0);
const vec3 d = vec3(0.5, 0.2, 0.25);

vec3 colorPalette(float t) {
    return a + b * cos(6.28 * (t * c + d));
}

vec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {

    float lambert = max(0.0, dot(lightVec, n));
    switch(hitObj) {
        case OBJ_FLOOR:
        return MattewhiteColor*lambert;
        break;
        
        case OBJ_CEILING:
        return MattewhiteColor*lambert;
        break;
        
        case OBJ_BACKWALL:
        {
        vec3 normal = vec3(0.0, 0.0, 1.0);
        vec2 backUV = planeUV(normal * 5.0, normal, p);
        
        float m = 5.0;
    	float x = backUV.x;
    	float y = backUV.y;
        vec2 gradient = vec2(0.0);
        float delta = 1.0;
    	gradient.x = worley(x + delta, y, m) - worley(x - delta, y, m);
    	gradient.y = worley(x, y + delta, m) - worley(x, y - delta, m);
        
        backUV += gradient;
        float r = 0.48;
        float dis = worleyFire2(backUV * iResolution.xy / 160.0, iTime * 5.0);
        vec3 fire = mix(vec3(1.0, 0.95, 0.5), vec3(0.8, 0.0, 0.0), dis);
           
        vec3 color = colorPalette(r) * 0.618 + fire * 0.75;
        return color * lambert;
        break;
    }
        break;
        
        case OBJ_LEFTWALL:
        return leftWallColor*lambert;
        break;
        
        case OBJ_RIGHTWALL:
        return rightWallColor*lambert;
        break;
        
        
        case OBJ_SHORTBLOCK:
        return vec3(0.25, 1., 0.5) * lambert * fbm(vec2(p.x, p.y));
        break;
        
        
        case OBJ_TALLBLOCK:
        {
        vec3 noisePos = vec3(p.x + sin(iTime), p.y + cos(iTime), p.z + cos(iTime));
        float perlin = PerlinNoise3D(noisePos);
        return 1.8 * colorPalette(perlin) * lambert;
        break;
        }
        break;
        
        case -1:
        return vec3(0., 0., 0.);
        break;
    }
    return vec3(0., 0., 0.);
}


Intersection sdf3D(vec3 dir, vec3 eye) {
    float t;
    int hitObj;
    march(eye, dir, t, hitObj);

    vec3 isect = eye + t * dir;
    vec3 nor = computeNormal(isect);
    //vec3 lightDir = normalize(lightPos - isect);
    
    vec3 lightDir = normalize(-isect+lightPos); // dummy value
    
    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));
    
    return Intersection(t, surfaceColor, isect, hitObj);
}


// Returns direction of ray
vec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {
    vec3 F = ref - eye;
    vec3 R = normalize(cross(F, vec3(0,1,0)));
    vec3 U = normalize(cross(R, F));
    
    vec3 V = U * length(F) * tan(FOVY * 0.5);
    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;
    
    vec3 p = ref + ndc.x * H + ndc.y * V;
    
    return normalize(p - eye);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord / iResolution.xy;
    // Convert to range [-1, 1]
    uv = uv * 2.0 - vec2(1.0, 1.0);
    
    vec3 eye = vec3(0, 4, -15);
    vec3 ref = vec3(0, 1.5, 0);
    
    vec3 rayDir = rayCast(eye, ref, uv);
    
    Intersection isect = sdf3D(rayDir, eye);

    fragColor = vec4(isect.color, 1.);
}