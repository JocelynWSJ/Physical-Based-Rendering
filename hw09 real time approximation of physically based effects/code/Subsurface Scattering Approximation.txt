#define OBJ_FLOOR		1
#define OBJ_CEILING		2
#define OBJ_BACKWALL	3
#define OBJ_LEFTWALL	4
#define OBJ_RIGHTWALL	5
#define OBJ_LIGHT		6
#define OBJ_SHORTBLOCK	7
#define OBJ_TALLBLOCK	8
#define OBJ_BALL		9

#define SDF_FLOOR		pos.y+3.
#define SDF_CEILING		6. -pos.y
#define SDF_BACKWALL	5. - pos.z
#define SDF_LEFTWALL	5. - pos.x
#define SDF_RIGHTWALL	pos.x+5.
#define SDF_LIGHT		6
#define SDF_SHORTBLOCK	sdBox(rotateY(pos+vec3(2.5, 1.5, -3.75), -0.13*3.1415926), vec3(1.5, 1.5, 1.5))
#define SDF_TALLBLOCK	sdBox(rotateY(pos+vec3(-4., 0., -3.), -0.24*3.1415926), vec3(1.5, 3., 1.5))
#define SDF_BALL		sdSphere(pos+vec3(7., 0., -6.), 2., vec3(1.5, 3., 1.5))


const float FOVY = 3.141569 * 0.25;
const int RAY_STEPS = 256;

const int AO_SAMPLES = 256;
const float AO_DIST = 0.15;
const float FIVETAP_K = 2.0;

//const vec3 lightPos = rotateY(vec3(12.0, 4.0, -6.0), sin(iTime) * 0.5);

const vec3 lightColor = vec3(1.0);
const vec3 lightDiffuseColor = vec3(1.0);
const vec3 leftWallColor = vec3(0.63, 0.065, 0.05);
const vec3 rightWallColor = vec3(0.14, 0.45, 0.091);
const vec3 MattewhiteColor = vec3(0.85, 0.81, 0.78);

vec3 lightPos = vec3(0.0, 0.0, 0.0);
vec3 lightBallPos = vec3(0.0, 0.0, 0.0);
                        
// The larger the DISTORTION, the smaller the glow
const float DISTORTION = 0.2;
// The higher GLOW is, the smaller the glow of the subsurface scattering
const float GLOW = 6.0;
// The higher the BSSRDF_SCALE, the brighter the scattered light
const float BSSRDF_SCALE = 3.0;
// Boost the shadowed areas in the subsurface glow with this
const float AMBIENT = 0.0;
// Toggle this to affect how easily the subsurface glow propagates through an object
#define ATTENUATION 0

struct Intersection {
    float t;
    vec3 color;
    vec3 p;
    int object; // Assign every object in our scene a unique ID int
};
    
    
vec3 rotateY(vec3 p, float a) {
    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);
}

float sdSphere(vec3 p, float r, vec3 c)
{
    return distance(p, c) - r;
}

float sdBox(vec3 p, vec3 b) {
	vec3 d = abs(p) - b;
	return min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));
}

float sdPlane( vec3 p, vec4 n )
{
  // n must be normalized
  return dot(p,n.xyz) + n.w;
}

void CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {
    if (abs(v1.x) > abs(v1.y))
            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);
        else
            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);
        v3 = cross(v1, v2);
}

mat3 TangentToWorld(vec3 nor) {
	vec3 tangent, bitangent;
    CoordinateSystem(nor, tangent, bitangent);
    return mat3(tangent, bitangent, nor);
}


void sceneMap3D(vec3 pos, vec3 lightPos, out float t, out int obj) {
    t = SDF_FLOOR;
    obj = OBJ_FLOOR;
    
    float t6;
    if((t6 = sdSphere(pos, 1.0, lightPos)) < t) {
        t = t6;
        obj = OBJ_LIGHT;
    }
    
    float t7;
    if((t7 = SDF_SHORTBLOCK) < t) {
        t = t7;
        obj = OBJ_SHORTBLOCK;
    }
    
    float t8;
    if((t8 = SDF_TALLBLOCK) < t) {
        t = t8;
        obj = OBJ_TALLBLOCK;
    }
    
    float t9;
    if((t9 = SDF_BALL) < t) {
        t = t9;
        obj = OBJ_BALL;
    }
}


float sceneMap3D(vec3 pos) {
    float t = SDF_FLOOR;
    
    float t6;
    if((t6 = sdSphere(pos, 1.0, lightPos)) < t) {
       t = t6;
    }
    
    float t7;
    if((t7 = SDF_SHORTBLOCK) < t) {
        t = t7;
    }
    
    float t8;
    if((t8 = SDF_TALLBLOCK) < t) {
        t = t8;
    }
    
    float t9;
    if((t9 = SDF_BALL) < t) {
        t = t9;
    }
    return t;
}

float shadowMap3D(vec3 pos)
{
    float t = SDF_FLOOR;

    float t7;
    if((t7 = SDF_SHORTBLOCK) < t) {
        t = t7;
    }
    
    float t8;
    if((t8 = SDF_TALLBLOCK) < t) {
        t = t8;
    }
    
    float t9;
    if((t9 = SDF_BALL) < t) {
        t = t9;
    }
    return t;
}

vec3 computeNormal(vec3 pos) {
    vec3 epsilon = vec3(0.0, 0.001, 0.0);
    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),
                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),
                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));
}

void march(vec3 origin, vec3 dir, vec3 lightPos, out float t, out int hitObj) {
    t = 0.001;
    for(int i = 0; i < RAY_STEPS; ++i) {
        vec3 pos = origin + t * dir;
    	float m;
        sceneMap3D(pos, lightPos, m, hitObj);
        if(m < 0.01) {
            return;
        }
        t += m;
    }
    t = -1.0;
    hitObj = -1;
}

const vec3 a = vec3(0.5, 0.5, 0.5);
const vec3 b = vec3(0.5, 0.5, 0.5);
const vec3 c = vec3(2.0, 1.0, 1.0);
const vec3 d = vec3(0.5, 0.2, 0.25);

vec3 colorPalette(float t) {
    return a + b * cos(6.28 * (t * c + d));
}


float fiveTapAO(vec3 p, vec3 n, float k) {
    float aoSum = 0.0;
    for(float i = 0.0; i < 5.0; ++i) {
        float coeff = 1.0 / pow(2.0, i);
        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));
    }
    return 1.0 - k * aoSum;
}

float subsurface(vec3 lightDir, vec3 normal, vec3 viewVec, float thickness) {
    vec3 scatteredLightDir = lightDir + normal * DISTORTION;
    float lightReachingEye = pow(clamp(dot(viewVec, -scatteredLightDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;
    float attenuation = 1.0;
    #if ATTENUATION
    attenuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir));
    #endif
	float totalLight = attenuation * (lightReachingEye + AMBIENT) * thickness;
    return totalLight;
}

float softShadow(vec3 dir, vec3 origin, float min_t, float k) {
    float res = 1.0;
    float t = min_t;
    for(int i = 0; i < RAY_STEPS; ++i) {
        float m = shadowMap3D(origin + t * dir);
        if(m < 0.0001) {
            return 0.0;
        }
        res = min(res, k * m / t);
        t += m;
    }
    return res;
}

float shadow(vec3 dir, vec3 origin, float min_t) {
    return softShadow(dir, origin, min_t, 10.0);
}

vec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view, float thickness) {

    float lambert = max(0.0, dot(lightVec, n));
    switch(hitObj) {
        case OBJ_FLOOR:
        return vec3(1.0, 0.88, 0.7) * lambert * shadow(lightVec, p, 0.1);;
        break;
        
        case OBJ_LIGHT:
        return vec3(1.0, 0.88, 0.7);
        break;
        
        case OBJ_SHORTBLOCK:
        vec3 color = vec3(1.0, 0.48, 0.7) * vec3(1.0, 0.67, 0.67) * max(0.0, dot(n, lightVec)) * shadow(lightVec, p, 0.1);
        return color + vec3(1.0, 0.67, 0.67) * subsurface(lightVec, n, view, thickness) * vec3(1.0, 0.48, 0.7);

        break;
        
        case OBJ_TALLBLOCK:
        color = vec3(1.0, 0.88, 0.7) * vec3(1.0, 0.67, 0.67) * max(0.0, dot(n, lightVec)) * shadow(lightVec, p, 0.1);
        return color + vec3(1.0, 0.67, 0.67) * subsurface(lightVec, n, view, thickness) * vec3(1.0, 0.88, 0.7);
        break;
        
        case OBJ_BALL:
        color = vec3(0.4, 0.88, 0.2) * vec3(1.0, 0.67, 0.67) * max(0.0, dot(n, lightVec)) * shadow(lightVec, p, 0.1);
        return color + vec3(1.0, 0.67, 0.67) * subsurface(lightVec, n, view, thickness) * vec3(0.4, 0.88, 0.2);
        break;
        
        case -1:
        return vec3(0., 0., 0.);
        break;
    }
    return vec3(0., 0., 0.);
}


Intersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos) {
    float t;
    int hitObj;
    march(eye, dir, lightPos, t, hitObj);

    vec3 isect = eye + t * dir;
    vec3 nor = computeNormal(isect);
    //vec3 lightDir = normalize(lightPos - isect);
    
    vec3 lightDir = normalize(-isect+lightPos); // dummy value
    
    float thickness = fiveTapAO(isect, -nor, FIVETAP_K);
    
    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thickness);
    
    return Intersection(t, surfaceColor, isect, hitObj);
}


// Returns direction of ray
vec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {
    vec3 F = ref - eye;
    vec3 R = normalize(cross(F, vec3(0,1,0)));
    vec3 U = normalize(cross(R, F));
    
    vec3 V = U * length(F) * tan(FOVY * 0.5);
    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;
    
    vec3 p = ref + ndc.x * H + ndc.y * V;
    
    return normalize(p - eye);
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec3 lightP = rotateY(vec3(-8.0, 7.0, 4.0), sin(iTime) * 0.5);
    lightPos = lightP;
    lightBallPos = lightPos;
    lightBallPos.y = lightBallPos.y-1.5;
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord / iResolution.xy;
    // Convert to range [-1, 1]
    uv = uv * 2.0 - vec2(1.0, 1.0);
    
    vec3 eye = vec3(0, 4, -15);
    vec3 ref = vec3(0, 1.5, 0);
    
    vec3 rayDir = rayCast(eye, ref, uv);
    
    Intersection isect = sdf3D(rayDir, eye, lightPos);

    fragColor = vec4(isect.color, 1.);
    
}